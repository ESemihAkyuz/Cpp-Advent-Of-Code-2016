//Advent of Code 2016 - Problems can be found at https://adventofcode.com/2016

//////WORK IN PROGRESS//////

#include "Header.h"

int main() {
	day10();
}

/// Input Parser Mode 0 = From String - Mode 1 = From File
std::vector<std::string> readIntoStringVector(int mode, std::string directoryorstring, char delim) {
	using namespace std;

	vector<string> output;
	fstream sourcefile;
	string line;
	istringstream inputstream(directoryorstring);

	switch (mode)
	{
	case 0:
		while (getline(inputstream, line, delim)) { output.push_back(line); }

		break;

	case 1:
		sourcefile.open(directoryorstring, ios::in);

		while (getline(sourcefile, line, delim)) { output.push_back(line); }

		sourcefile.close();

		break;


	default:
		break;
	}

	return output;
}

/// Replace all instances of multiple chars with delim(s) of choice
std::string ReplaceMultiDelim(std::string xinput, char xreplace, std::string xwith) {
	using namespace std;
	int cpos = 0;
	int countmulti;

	while (xinput.find(xreplace) != string::npos) {
		cpos = xinput.find(xreplace);
		countmulti = 1;

		if (cpos + countmulti <= xinput.length() - 1) {
			while (xinput.at(cpos + countmulti) == xreplace) {
				countmulti++;
			}
		}
		xinput.replace(cpos, countmulti, xwith);
	}
	return xinput;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////1
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////1
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////1
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////1
//DAY 1 P1 & P2 - No Time for Taxicab
int day1()
{
	using namespace std;
	vector<string> commands = readIntoStringVector(1, "./PuzzleInputsTXT/day1source.txt", ',');

	int orientation = 0; //  0 = North, 1 = East, 2 = South, 3 = West
	int x = 0; //Absolute x coordinate
	int y = 0; //Absolute y coordinate 
	int units; //Length of current walk command
	string walk; //Vector element movement command such as "R2"
	int axis[4][2] = { {0,1}, {1,0}, {0,-1}, {-1,0} };

	//Part 2 Variables
	vector<string> pastlocations;
	string locationmemory = "(0,0)/";
	string currentlocation = "(0,0)/";
	int repeatvisitdistance;
	int temp;
	int oldx;
	int oldy;
	bool printedrepeat = 0;

	for (int i = 0; i < commands.size(); i++) {
		oldx = x;
		oldy = y;
		walk = commands[i];
		units = stoi(walk.substr(2, walk.length() - 1));

		walk.find('R') != string::npos ? orientation++ : orientation--;
		if (orientation < 0) { orientation = 3; }
		orientation %= 4;

		temp = units;
		if (axis[orientation][0] != 0) {
			for (temp; temp > 0; temp--) {

				x += axis[orientation][0];

				currentlocation = '(' + to_string(x) + ',' + to_string(oldy) + ")/";

				if (locationmemory.find(currentlocation) != string::npos) {
					repeatvisitdistance = abs(x) + abs(y);

					if (printedrepeat == 0) {
						std::cout << "First Repeated Visit Distance = " << repeatvisitdistance << endl; printedrepeat = 1;
					}

					locationmemory.append(currentlocation);
				}
			}
		}

		temp = units;
		if (axis[orientation][1] != 0) {
			for (temp; temp > 0; temp--) {

				y += axis[orientation][1];

				currentlocation = '(' + to_string(oldx) + ',' + to_string(y) + ")/";

				if (locationmemory.find(currentlocation) != string::npos) {
					repeatvisitdistance = abs(x) + abs(y);

					if (printedrepeat == 0) {
						std::cout << "First Repeated Visit Distance = " << repeatvisitdistance << endl; printedrepeat = 1;
					}

				}

				locationmemory.append(currentlocation);
			}
		}

	}
	std::cout << "Total Distance At End = " << abs(x) + abs(y) << endl; // Part one output

	return 0;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////2
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////2
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////2
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////2
//DAY 2 - Bathroom Security

int day2() {
	using namespace std;

	vector<string> commands = readIntoStringVector(1, "./PuzzleInputsTXT/day2source.txt", '\n');
	int arx = 1;
	int ary = 1;
	string finalcode;

	string pad[3][3] =
	{
		{"1","2","3"},
		{"4","5","6"},
		{"7","8","9"}
	};

	for (string segment : commands) {

		for (char c : segment) {

			switch (c)
			{
			case 'D':
				if (ary < 2) { ary++; }
				break;

			case 'U':
				if (ary > 0) { ary--; }
				break;

			case 'L':
				if (arx > 0) { arx--; }
				break;

			case 'R':
				if (arx < 2) { arx++; }
				break;

			default:
				break;
			}
		}

		finalcode += pad[ary][arx];
	}
	std::cout << finalcode;
	return 0;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////3
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////3
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////3
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////3
//AOC Day 3 P1: Squares With Three Sides
int day3()
{
	using namespace std;
	vector<string> sourcelines = readIntoStringVector(1, "./PuzzleInputsTXT/day3source.txt", '\n');
	vector<string> sdimpass;
	vector<int> idimpass;
	vector<vector<int>> dimensions;

	string tempstring;
	int successcount = 0;

	for (string nums : sourcelines) {
		tempstring = ReplaceMultiDelim(nums, ' ', ",");
		tempstring.erase(0, 1);
		sdimpass = readIntoStringVector(0, tempstring, ',');

		for (string number : sdimpass) {
			idimpass.push_back(stoi(number));
		}

		dimensions.push_back(idimpass);
		idimpass.clear();
	}



	for (vector<int> group : dimensions) {
		int a = group[0];
		int b = group[1];
		int c = group[2];

		if ((a + b) > c && (a + c) > b && (b + c) > a) { successcount++; }

	}

	std::cout << "Number of possible triangles = " << successcount << endl;

	return 0;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////4
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////4
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////4
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////4
//AOC Day 4 P1 & P2: Security Through Obscurity
int day4() {
	using namespace std;
	vector<string> source = readIntoStringVector(1, "./PuzzleInputsTXT/day4source.txt", '\n');
	map<char, int> lookup;
	vector<pair<char, int>> top5 = { {'`',0},{'`',0},{'`',0},{'`',0},{'`',0} };
	vector<pair<string, int>> validlookup;
	string checksum;
	int idsum = 0;
	int id = 0;

	int rotation;
	string storedecrypt;

	for (string line : source) {

		//Only works if checksum is consistently 5 chars
		checksum = line.substr(line.size() - 6, 5);
		line.erase(line.size() - 7);
		id = stoi(line.substr(line.rfind('-') + 1));
		line.erase(line.rfind('-'));

		for (char x : line) {

			if (x != '-') {
				lookup[x]++;
			}
		}

		for (pair<char, int> set : lookup) {

			for (int i = 0; i <= 4; i++) {

				if (set.second > top5[i].second) {
					rotate(rbegin(top5), rbegin(top5) + 1, rend(top5) - i);
					top5[i] = set;
					break;
				}
			}
		}

		if
			(
				checksum[0] == top5[0].first &&
				checksum[1] == top5[1].first &&
				checksum[2] == top5[2].first &&
				checksum[3] == top5[3].first &&
				checksum[4] == top5[4].first
				)
		{
			idsum += id;
			validlookup.push_back(make_pair(line, id));
		}

		top5 = { {'`',0},{'`',0},{'`',0},{'`',0},{'`',0} };
		lookup.clear();

	}

	std::cout << "Sum of valid room ID's " << idsum << endl;

	for (pair<string, int> z : validlookup) {
		rotation = z.second % 26;
		for (char a : z.first) {
			a == 45 ? storedecrypt += 32 : storedecrypt += ((a - 97 + rotation) % 26 + 97);
		}

		if (storedecrypt.find("northpole") != string::npos) {
			std::cout << z.first << " = " << storedecrypt << " at sector " << z.second;
		}

		storedecrypt = "";

	}

	return 0;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////5
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////5
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////5
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////5
//AOC Day 5 P1: How About a Nice Game of Chess 
// Skipped for now, need MD5 hashing library
int day5() {
	using namespace std;

	return 0;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////6
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////6
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////6
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////6
//AOC Day 6 P1 & P2 : Signals and Noise
int day6() {
	using namespace std;

	vector<string> source = readIntoStringVector(1, "./PuzzleInputsTXT/day6source.txt", '\n');
	//vector<string> source = { "eedadn", "drvtee","eandsr","raavrd","atevrs","tsrnev","sdttsa","rasrtv","nssdts","ntnada","svetve","tesnvt","vntsnd","vrdear","dvrsen","enarar" }; //given test = easter, advent
	vector<string> sourcevertical(source[0].length());
	map<char, int> occurrence;
	int iter = 0;
	pair <char, int> vertcommon = { 'a',0 };
	pair <char, int> vertleast = { 'a', 99999999999 }; //2
	string answer;
	string answer2; //2


	for (string raw : source) {
		for (char a : raw) {
			sourcevertical[iter] += a;
			iter++;
		}
		iter = 0;
	}

	for (string vertraw : sourcevertical) {

		for (char b : vertraw) {
			occurrence[b]++;
		}

		for (pair<char, int> c : occurrence) {
			if (c.second > vertcommon.second) { vertcommon.first = c.first; vertcommon.second = c.second; }
			if (c.second < vertleast.second) { vertleast.first = c.first; vertleast.second = c.second; }

		}

		answer += vertcommon.first;
		answer2 += vertleast.first;
		vertcommon = { 'a',0 };
		vertleast = { 'a', 99999999999 };
		occurrence.clear();
	}

	std::cout << "Error Corrected Message P1 = " + answer << endl;
	std::cout << "Error Corrected Message P2 = " + answer2 << endl;

	return 0;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////7
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////7
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////7
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////7
//AOC Day 7 P1 & P2 : Internet Protocol Version 7
int day7() {
	using namespace std;
	vector<string> source = readIntoStringVector(1, "./PuzzleInputsTXT/day7source.txt", '\n');
	//vector<string> source = { "abba[mnop]qrst","abcd[bddb]xyyx","aaaa[qwer]tyui","ioxxoj[asdfgh]zxcvbn" }; //Test
	//vector<string> source = {"aba[bab]xyz","xyx[xyx]xyx","aaa[kek]eke","zazbz[bzb]cdb"}; //Test Part 2
	vector<string> nhvect;
	int countTLS = 0;
	int countSSL = 0;
	bool abba = 0;
	bool hyperabba = 0;
	vector<string> babs;
	vector<string> abas;
	bool sslFound = 0;

	for (string line : source) {
		while (line.length() > 0) {
			nhvect.push_back(line.substr(0, line.find("[")));
			line.erase(0, line.find("["));
			if (line.length() == 0) { continue; }
			nhvect.emplace(begin(nhvect), line.substr(0, line.find("]")));
			line.erase(0, line.find("]") + 1);
		}


		for (string nh : nhvect) {

			//Normalize input to length divisable by 4 to avoid string bound errors
			for (int neededchar = nh.length() % 4; neededchar > 0; neededchar--) {
				nh += '_';
			}

			for (int i = 0; i <= nh.length() - 4; i++) {

				if (nh[i] == nh[i + 3] && nh[i + 1] == nh[i + 2] && nh[i] != nh[i + 1]) {

					if (nh[0] != '[') { abba = 1; }
					else {
						hyperabba = 1;
						i = nh.length() + 1;
					}
				}

			}

			for (int neededchar = nh.length() % 3; neededchar > 0; neededchar--) {
				nh += '_';
			}

			for (int i = 0; i <= nh.length() - 3; i++) {
				if (nh[i] == nh[i + 2] && nh[i] != nh[i + 1] && nh[0] == '[') {
					babs.push_back(nh.substr(i, 3));

				}

				if (nh[i] == nh[i + 2] && nh[i] != nh[i + 1] && nh[0] != '[') {
					abas.push_back(nh.substr(i, 3));
				}
			}
		}

		for (string ofaba : abas) {
			for (string ofbab : babs) {
				if (ofaba[0] == ofbab[1] && ofaba[1] == ofbab[0] && sslFound == 0) {
					countSSL++;
					sslFound = 1;
				}
			}
		}

		if (hyperabba == 0 && abba == 1) { countTLS++; }
		abba = 0;
		hyperabba = 0;
		sslFound = 0;
		nhvect.clear();
		abas.clear();
		babs.clear();
	}

	std::cout << "TLS Supporting IP's = " << countTLS << endl;
	std::cout << "SSL Supporting IP's = " << countSSL << endl;

	return 0;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8
//AOC Day 8 P1 & P2 : Two-Factor Authentication
int day8() {
	using namespace std;
	int litPixels = 0;
	vector<string> source = readIntoStringVector(1, "./PuzzleInputsTXT/day8source.txt", '\n');
	char screen[6][50];

	fill(begin(screen[0]), end(screen[5]), '.');

	for (string& line : source) {

		if (line.find("rect") != string::npos) {
			line.erase(0, 5);
			line = line.replace(line.find("x"), 1, "w");
		} // Command "rect 1x1"  = "1w1"    to avoid char interference with "column x"

		if (line.find("row") != string::npos) {

			line = "y" + line.substr(line.find("=") + 1, (line.find(" by") - 1 - line.find("="))) + "r" + line.substr(line.find("by ") + 3);

		} // Command "rotate row y=0 by 5" = "y0r5"

		if (line.find("column") != string::npos) {

			line = "x" + line.substr(line.find("=") + 1, (line.find(" by") - 1 - line.find("="))) + "r" + line.substr(line.find("by ") + 3);

		} // Command "rotate column x=0 by 5" = "x0r5"

	}

	for (string line : source) {

		if (line.find("w") != string::npos) {
			int rectHor = stoi(line.substr(0, line.find("w"))) - 1;
			int rectVer = stoi(line.substr(line.find("w") + 1)) - 1;


			for (rectVer; rectVer >= 0; rectVer--) {
				int rectHorTemp = rectHor;

				for (rectHorTemp; rectHorTemp >= 0; rectHorTemp--) {
					screen[rectVer][rectHorTemp] = '#';
				}

			}

		}

		if (line.find("y") != string::npos) {
			int targetRow = stoi(line.substr(1, line.find("r") - 1));
			int degree = stoi(line.substr(line.find("r") + 1));
			rotate(begin(screen[targetRow]), end(screen[targetRow]) - degree, end(screen[targetRow]));

		}

		if (line.find("x") != string::npos) {
			char tempCol[6];
			int targetCol = stoi(line.substr(1, line.find("r") - 1));
			int degree = stoi(line.substr(line.find("r") + 1));

			for (int i = 5; i >= 0; i--) {
				tempCol[i] = screen[i][targetCol];
			}

			rotate(begin(tempCol), end(tempCol) - degree, end(tempCol));

			for (int i = 5; i >= 0; i--) {
				screen[i][targetCol] = tempCol[i];
			}
		}
	}

	for (int i = 0; i <= 5; i++) {
		for (int u = 0; u <= 49; u++) {
			if (screen[i][u] == '#') { litPixels++; }
			cout << screen[i][u];
		}
		cout << endl;
	}

	std::cout << "Number of lit pixels = " << litPixels << endl;

	return 0;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////9
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////9
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////9
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////9
//AOC Day 9 P1 : Explosives in Cyberspace

int day9() {
	using namespace std;
	vector<string> source = readIntoStringVector(1, "./PuzzleInputsTXT/day9source.txt", '\n');

	int decLength = 0;

	for (string line : source) {
		string currentDecodedLine;

		while (line.find("(") != string::npos) {
			string currentMarker = line.substr(line.find("(") + 1, line.find(")") - 1);
			line.erase(0, line.find(")") + 1);

			int seqLength = stoi(currentMarker.substr(0, currentMarker.find("x")));
			int repeat = stoi(currentMarker.substr(currentMarker.find("x") + 1));
			string sequence;

			for (int i = 0; i < seqLength; i++) {
				sequence += line[i];
			}

			line.erase(0, seqLength);

			for (repeat; repeat > 0; repeat--) {
				currentDecodedLine += sequence;
			}
			decLength += currentDecodedLine.length();
			currentDecodedLine = "";
		}

		cout << "Length of decoded input v1 = " << decLength << endl;

	}

	return 0;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////10
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////10
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////10
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////10
//AOC Day 10 P1 : Balance Bots

int day10() {
	using namespace std;
	vector<string> source = readIntoStringVector(1, "./PuzzleInputsTXT/day10source.txt", '\n');

	struct bot {
		int chip1Val = 0;
		int chip2Val = 0;
		int botIndex = 0;
	};

	bool p1found = false;

	vector<struct bot> botInventories;
	vector<pair<int, int>> botSendRules;

	for (string line : source) {

		if (line.find("gives") != string::npos) {
			int currentBotNum = stoi(line.substr(4, line.length() - line.find(" ", 5) - 4));
			int sendLowTo;
			int sendHighTo;

			if (line.find("low to output ") != string::npos) { sendLowTo = 0; }
			else { sendLowTo = stoi(line.substr(line.find("low to bot ") + 11, line.length() - line.find(" ", line.find("low to bot ") + 11))); }
			if (line.find("high to output ") != string::npos) { sendHighTo = 0; }
			else { sendHighTo = stoi(line.substr(line.find("high to bot ") + 12)); }

			if (botSendRules.size() < max(max(currentBotNum, sendHighTo), sendLowTo)) { botSendRules.resize(max(max(currentBotNum, sendHighTo), sendLowTo) + 1); }
			botSendRules[currentBotNum] = { sendLowTo, sendHighTo };
		}

		botInventories.resize(botSendRules.size());

		if (line.find("goes to bot") != string::npos) {
			int currentChipValue = stoi(line.substr(6, line.length() - line.find(" ", 6) - 6));
			int currentBotNum = stoi(line.substr(line.find("bot ") + 4));

			if (botInventories[currentBotNum].chip1Val == 0 && botInventories[currentBotNum].chip2Val == 0) {
				bot currentBot;
				currentBot.chip1Val = currentChipValue;
				botInventories[currentBotNum] = currentBot;
			}
			else if (botInventories[currentBotNum].chip1Val != 0) {
				botInventories[currentBotNum].chip2Val = currentChipValue;
			}
		}
	}

	int IndexIter = -1;
	for (bot& currentBot : botInventories) {
		IndexIter += 1;
		currentBot.botIndex = IndexIter;
	}

	while (p1found == false) {

		for (bot& currentBot : botInventories) {
			if (currentBot.botIndex != 0 && currentBot.chip1Val != 0 && currentBot.chip2Val != 0) {
				int high = max(currentBot.chip1Val, currentBot.chip2Val);
				int low = min(currentBot.chip1Val, currentBot.chip2Val);

				if (botInventories[botSendRules[currentBot.botIndex].first].chip1Val == 0) {
					botInventories[botSendRules[currentBot.botIndex].first].chip1Val = low;
				}
				else { botInventories[botSendRules[currentBot.botIndex].first].chip2Val = low; }

				if (botInventories[botSendRules[currentBot.botIndex].second].chip1Val == 0) {
					botInventories[botSendRules[currentBot.botIndex].second].chip1Val = high;
				}
				else { botInventories[botSendRules[currentBot.botIndex].second].chip2Val = high; }

				currentBot.chip1Val = 0;
				currentBot.chip2Val = 0;

				cout << "Bot " << currentBot.botIndex << " compared " << high << " , " << low << endl;

				if (high == 61 && low == 17) {
					cout << "Bot who compares value-61 and value-17 chips is bot #" << currentBot.botIndex << endl;
					p1found = true;
					break;
				}
			}
		}
	}

	return 0;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////11
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////11
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////11
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////11
//AOC Day 11 P1 : Radioisotope Thermoelectric Generators

int day11() {
	using namespace std;







	return 0;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////12
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////12
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////12
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////12
//AOC Day 12

int day12() {
	using namespace std;







	return 0;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////13
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////13
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////13
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////13
//AOC Day 13

int day13() {
	using namespace std;







	return 0;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////14
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////14
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////14
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////14
//AOC Day 14

int day14() {
	using namespace std;







	return 0;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////15
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////15
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////15
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////15
//AOC Day 15

int day15() {
	using namespace std;







	return 0;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////16
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////16
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////16
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////16
//AOC Day 16

int day16() {
	using namespace std;







	return 0;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////17
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////17
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////17
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////17
//AOC Day 17

int day17() {
	using namespace std;







	return 0;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////18
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////18
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////18
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////18
//AOC Day 18

int day18() {
	using namespace std;







	return 0;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////19
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////19
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////19
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////19
//AOC Day 19

int day19() {
	using namespace std;







	return 0;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////20
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////20
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////20
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////20
//AOC Day 20

int day20() {
	using namespace std;







	return 0;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////21
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////21
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////21
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////21
//AOC Day 21

int day21() {
	using namespace std;







	return 0;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////22
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////22
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////22
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////22
//AOC Day 22

int day22() {
	using namespace std;







	return 0;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////23
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////23
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////23
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////23
//AOC Day 23

int day23() {
	using namespace std;







	return 0;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////24
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////24
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////24
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////24
//AOC Day 24

int day24() {
	using namespace std;







	return 0;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////25
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////25
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////25
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////25
//AOC Day 25

int day25() {
	using namespace std;







	return 0;
}